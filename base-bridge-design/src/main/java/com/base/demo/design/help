1.为什么你的代码那么多if-else

同类的业务、同样的功能，怎么就你能写出来那么多if-else。很多时候一些刚刚从校园进入企业的萌新，或者一部分从小公司跳槽到大企业的程序员，
初次承接业务需求的时候，往往编码还不成熟，经常一杆到底的写需求。初次实现确实很快，但是后期维护和扩展就十分痛苦。
因为一段代码的可读性阅读他后期的维护成本也就越高。

2.设计模式是可以帮助你改善代码

很多时候你写出来的if-else都是没有考虑使用设计模式优化，就像；同类服务的不同接口适配包装、同类物料不同组合的建造、多种奖品组合的营销工厂等等。
它们都可以让你代码中原本使用if判断的地方，变成一组组类和面向对象的实现过程。

3.怎么把设计模式和实际开发结合起来

多从实际场景思考，只找到代码优化的最佳点，不要可以想着设计模式的使用。就像你最开始看设计模式适合，因为没有真实的场景模拟案例，
都是一些画圆形、方形，对新人或者理解能力还不到的伙伴来说很不友好。所以即使学了半天 ，但实际使用还是摸不着头脑。

4.桥接模式的主要作用就是通过将抽象部分与实现部分分离，把多种可匹配的使用进行组合。说白了核心实现也就是在A类中含有B类接口，通过构造函数传递B类的实现，这个B类就是设计的桥。

  那么这样的桥接模式，在我们平常的开发中有哪些场景！！！

  JDBC多种驱动程序的实现、同品牌类型的台式机和笔记本平板、业务实现中的多类接口同组过滤服务等。这些场景都比较适合使用桥接模式进行实现，
  因为在一些组合中如果有如果每一个类都实现不同的服务可能会出现笛卡尔积，而使用桥接模式就可以非常简单。

5.随着市场的竞争在支付服务行业出现了微信和支付宝还包括一些其他支付服务，但是对于商家来说并不希望改变用户习惯。就像如果我的地摊只能使用微信或者只能使用支付宝付款，那么就会让我顾客伤心，鸡蛋灌饼也卖不动了。

  在这个时候就出现了第三方平台，把市面上综合占据市场90%以上的支付服务都集中到自己平台中，再把这样的平台提供给店铺、超市、地摊使用，同时支持人脸、扫描、密码多种方式。

  我们这个案例就模拟一个这样的第三方平台来承接各个支付能力，同时使用自家的人脸让用户支付起来更加容易。那么这里就出现了多支付与多模式的融合使用，
  如果给每一个支付都实现一次不同的模式，即使是继承类也需要开发好多。而且随着后面接入了更多的支付服务或者支付方式，就会呈爆炸似的扩展。

  所以你现在可以思考一下这样的场景该如何实现？--见img_1.png

6.产品经理说老板要的需求，要尽快上，kpi你看着弄！--哈哈哈哈哈

  既然你逼我那就别怪我无情，还没有我一个类写不完的需求！反正写完就完事了，拿完绩效也要走了天天逼着写需求，代码越来越乱心疼后面的兄弟3秒。

7.桥接模式重构代码--见img_2.png

  1)左侧Pay是一个抽象类，往下是它的两个支付类型实现；微信支付、支付宝支付。
  2)右侧IPayMode是一个接口，往下是它的两个支付模型；刷脸支付、指纹支付。
  3)那么，支付类型 × 支付模型 = 就可以得到相应的组合。
  4)注意，每种支付方式的不同，刷脸和指纹校验逻辑也有差异，可以使用适配器模式进行处理，这里不是本文重点不做介绍，可以看适配器模式章节。

  从if-else方式实现来看，这是两种不同类型的相互组合。那么就可以把支付方式和支付模式进行分离通过抽象类依赖实现类的方式进行桥接，
  通过这样的拆分后支付与模式其实是可以单独使用的，当需要组合时候只需要把模式传递给支付即可。

  桥接模式的关键是选择的桥接点拆分，是否可以找到这样类似的相互组合，如果没有就不必要非得使用桥接模式。

8.总结
  1)通过模拟微信与支付宝两个支付渠道在不同的支付模式下，刷脸、指纹、密码，的组合从而体现了桥接模式的在这类场景中的合理运用。简化了代码的开发，给后续的需求迭代增加了很好的扩展性。
  2)从桥接模式的实现形式来看满足了单一职责和开闭原则，让每一部分内容都很清晰易于维护和拓展，但如果我们是实现的高内聚的代码，那么就会很复杂。
  所以在选择重构代码的时候，需要考虑好整体的设计，否则选不到合理的设计模式，将会让代码变得难以开发。
  3)任何一种设计模式的选择和使用都应该遵顼符合场景为主，不要刻意使用。而且统一场景因为业务的复杂从而可能需要使用到多种设计模式的组合，才能将代码设计的更加合理。
  但这种经验需要从实际的项目中学习经验，并提不断的运用。






















