1.相信相信的力量！

从懵懂的少年，到拿起键盘，可以写一个HelloWorld。多数人在这并不会感觉有多难，也不会认为做不出来。因为这样的例子，有老师的指导、有书本的例子、有前人的经验。
但随着你的开发时间越来越长，要解决更复杂的问题或者技术创新，因此在网上搜了几天几夜都没有答案，这个时候是否想过放弃，还是一直坚持不断的尝试一点点完成自己心里要的结果。
往往这种没有前车之鉴需要自己解决问题的时候，可能真的会折磨到要崩溃，但你要愿意执着、愿意倔强，愿意选择相信相信的力量，就一定能解决。
哪怕解决不了，也可以在这条路上摸索出其他更多的收获，为后续前进的道路填充好垫脚石。

2.时间紧是写垃圾代码的理由？

拧螺丝？Ctrl+C、Ctrl+V？贴膏药一样写代码？没有办法，没有时间，往往真的是借口，胸中没用笔墨，才只能凑合。
难道一定是好好写代码就浪费时间，拼凑CRUD就快吗，根本不可能的。因为不会，没用实操过，很少架构出全场景的设计，才很难写出优良的代码。
多增强自身的编码(武术)修为，在各种编码场景中让自己变得老练，才好应对紧急情况下的需求开发和人员安排。就像韩信一样有谋有略，才能执掌百万雄兵。

3.不要只是做个工具人！

因为日常的编写简单业务需求，导致自己像个工具人一样，日久天长的也就很少去深入学习更多技术栈。看见有工具、有组件、有框架，拿来就用用，
反正没什么体量也不会出什么问题。但如果你想要更多的收入，哪怕是重复的造轮子，你也要去尝试造一个，就算不用到生产，自己玩玩总可以吧。
有些事情只有自己经历过，才能有最深的感触，参与过实践过，才好总结点评学习。

4.迭代器模式--见图img.png
  常见的就是我们日常使用的iterator遍历。虽然这个设计模式在我们的实际业务开发中的场景并不多，但却几乎每天都要使用jdk为我们提供的list集合遍历。
  另外增强的for循环虽然是循环输出数据，但是他不是迭代器模式。迭代器模式的特点是实现Iterable接口，
  通过next的方式获取集合元素，同时具备对元素的删除等操作。而增强的for循环是不可以的。

  这种设计模式的优点是可以让我们以相同的方式，遍历不同的数据结构元素，这些数据结构包括；数组、链表、树等，
  而用户在使用遍历的时候并不需要去关心每一种数据结构的遍历处理逻辑，从让使用变得统一易用。

5.案例中我们模拟迭代遍历输出公司中树形结构的组织架构关系中雇员列表
  1)大部分公司的组织架构都是金字塔结构，也就这种树形结构，分为一级、二级、三级等部门，每个组织部门由雇员填充，最终体现出一个整体的树形组织架构关系。
  2)一般我们常用的遍历就是jdk默认提供的方法，对list集合遍历。但是对于这样的偏业务特性较大的树形结构，如果需要使用到遍历，那么就可以自己来实现。
  接下来我们会把这个组织层次关系通过树形数据结构来实现，并完成迭代器功能。

6.在实现迭代器模式之前可以先阅读下java中list方法关于iterator的实现部分，几乎所有的迭代器开发都会按照这个模式来实现，这个模式主要分为以下几块；
  1)Collection，集合方法部分用于对自定义的数据结构添加通用方法；add、remove、iterator等核心方法。
  2)Iterable，提供获取迭代器，这个接口类会被Collection继承。
  3)Iterator，提供了两个方法的定义；hasNext、next，会在具体的数据结构中写实现方式。
  除了这样通用的迭代器实现方式外，我们的组织关系结构树，是由节点和节点间的关系链构成，所以会比上述的内容多一些入参。

7.工程类图--结构图见img_1.png
  1)工程类图的模型结构，左侧是对迭代器的定义，右侧是在数据结构中实现迭代器功能。
  2)关于左侧部分的实现与jdk中的方式是一样的，所以在学习的过程中可以互相参考，也可以自己扩展学习。
  3)另外这个遍历方式一个树形结构的深度遍历，为了可以更加让学习的小伙伴容易理解，这里我实现了一种比较简单的树形结构深度遍历方式。
  后续读者也可以把遍历扩展为横向遍历也就是宽度遍历。

8.迭代器实现思路--GroupStructure.java
  1)这里的树形结构我们需要做的是深度遍历，也就是左侧的一直遍历到最深节点。
  2)当遍历到最深节点后，开始遍历最深节点的横向节点。
  3)当横向节点遍历完成后则向上寻找横向节点，直至树结构全部遍历完成。

9.总结
  1)迭代器的设计模式从以上的功能实现可以看到，满足了单一职责和开闭原则，外界的调用方也不需要知道任何一个不同的数据结构在使用上的遍历差异。
  可以非常方便的扩展，也让整个遍历变得更加干净整洁。
  2)但从结构的实现上可以看到，迭代器模式的实现过程相对来说是比较负责的，类的实现上也扩增了需要外部定义的类，使得遍历与原数据结构分开。
  虽然这是比较麻烦的，但可以看到在使用java的jdk时候，迭代器的模式还是很好用的，可以非常方便扩展和升级。
  3)以上的设计模式场景实现过程可能对新人有一些不好理解点，包括；迭代器三个和接口的定义、树形结构的数据关系、树结构深度遍历思路。
  这些都需要反复实现练习才能深入的理解，事必躬亲，亲历亲为，才能让自己掌握这些知识。
























