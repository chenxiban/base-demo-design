1.场地和场景的重要性

射击🏹需要去靶场学习、滑雪🏂需要去雪场体验、开车🚗需要能上路实践，而编程开发除了能完成产品的功能流程，还需要保证系统的可靠性能。
就像你能听到的一些系统监控指标；QPS、TPS、TP99、TP999、可用率、响应时长等等，而这些指标的总和评估就是一个系统的健康度。
但如果你几乎没有听到这样的技术术语，也没接触过类似高并发场景，那么就很像驾驶证的科目1考了100分，但不能上路。
没有这样的技术场景给你训练，让你不断的体会系统的脾气秉性，即便你有再多的想法都没法实现。所以，如果真的想学习一定要去一个有实操的场景，下水试试才能学会狗刨。

2.你的视觉盲区有多大

同样一本书、同样一条路、同样一座城，你真的以为生活有选择吗？有时候很多选项都是摆设，给你多少次机会你都选的一模一样。
这不是你选不选而是你的认知范围决定了你下一秒做的事情，另外的一个下一秒又决定了再下一个下一秒。就像管中窥豹一样，20%的面积在你视觉里都是黑色的，
甚至就总是忽略看不到，而这看不到的20%就是生命中的时运！但，人可以学习，可以成长，可以脱胎换骨，可以努力付出，通过一次次的蜕变而看到剩下的20%！

3.没有设计图纸你敢盖楼吗

编程开发中最好的是什么，是设计。运用架构思维、经验心得、才华灵感，构建出最佳的系统。真正的研发会把自己写的代码当做作品来欣赏，
你说这是一份工作，但在这样的人眼里这可不是一份工作，而是一份工匠精神。就像可能时而你也会为自己因为一个 niubility 的设计而豪迈万丈，
为能上线一个扛得住每秒200万访问量的系统会精神焕发。这样的自豪感就是一次次垒砖一样垫高脚底，不断的把你的视野提高，
让你能看到上层设计也能知晓根基建设。可以把控全局，也可以治理细节。这一份份知识的沉淀，来帮助你绘制出一张系统架构蓝图。

4.击鼓传雷，看 img.png 这张图片你是否想起周星驰有一个电影，大家坐在海边围成一个圈，拿着一个点燃的炸弹，互相传递。

责任链模式的核心是解决一组服务中的先后执行处理关系，就有点像你没钱花了，需要家庭财务支出审批，10块钱以下找闺女审批，
100块钱先闺女审批在媳妇审批。你可以理解想象成当你要跳槽的时候被安排的明明白白的被各个领导签字放行。


5.案例中我们模拟在618大促期间的业务系统上线审批流程场景

1)像是这些一线电商类的互联网公司，阿里、京东、拼多多等，在618期间都会做一些运营活动场景以及提供的扩容备战，就像过年期间百度的红包一样。
但是所有开发的这些系统都需要陆续的上线，因为临近618有时候也有一些紧急的调整的需要上线，但为了保障线上系统的稳定性是尽可能的减少上线的，
也会相应的增强审批力度。就像一级响应、二级响应一样。

2)而这审批的过程在随着特定时间点会增加不同级别的负责人加入，每个人就像责任链模式中的每一个核心点。对于研发小伙伴并不需要关心具体的审批流程处理细节，
只需要知道这个上线更严格，级别也更高，但对于研发人员来说同样是点击相同的提审按钮，等待审核。

3)接下来我们就模拟这样一个业务诉求场景，使用责任链的设计模式来实现此功能。

6.责任链模式可以让各个服务模块更加清晰，而每一个模块间可以通过next的方式进行获取。而每一个next是由继承的统一抽象类实现的。
最终所有类的职责可以动态的进行编排使用，编排的过程可以做成可配置化。

1)一般在使用责任链时候如果是场景比较固定，可以通过写死到代码中进行初始化。但如果业务场景经常变化可以做成xml配置的方式进行处理，
也可以落到库里进行初始化操作。

2)Level1AuthLink、Level2AuthLink、Level3AuthLink，实现了不同的审核级别处理的简单逻辑。
3)例如第一个审核类中会先判断是否审核通过，如果没有审核通过则返回结果给调用方，引导去审核。（这里简单模拟审核后有时间信息不为空，作为判断条件）
4)判断完成后获取下一个审核节点；super.next();，如果不存在下一个节点，则直接返回结果。
5)之后是根据不同的业务时间段进行判断是否需要，二级和一级的审核。
6)最后返回下一个审核结果；next.doAuth(uId, orderId, authDate);，有点像递归调用


总结
1.从所写的代码中，从if语句重构，到使用责任链模式开发可以看到，我们的代码结构变得清晰干净了，也解决了大量if语句的使用。
并不是if语句不好，只不过if语句并不适合做系统流程设计，但是在做判断和行为逻辑处理中还是非常可以使用的。

2.在我们前面学习结构性模式中讲到过组合模式，它像是一颗组合树一样，我们搭建出一个流程决策树。
其实这样的模式也是可以和责任链模型进行组合扩展使用，而这部分的重点在于如何关联链路的关联，最终的执行都是在执行在中间的关系链。

3.责任链模式很好的处理单一职责和开闭原则，简单了耦合也使对象关系更加清晰，
而且外部的调用方并不需要关心责任链是如何进行处理的(以上程序中可以把责任链的组合进行包装，在提供给外部使用)。
但除了这些优点外也需要是适当的场景才进行使用，避免造成性能以及编排混乱调试测试疏漏问题。















